version: '3.7'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - integration-net

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    hostname: kafka
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - integration-net
    command: >
      bash -c "
      /etc/confluent/docker/run &
      sleep 10 &&
      kafka-topics --create --if-not-exists --topic solicitar-estado-cuenta --bootstrap-server localhost:9092 --partitions 1 --replication-factor 1 &&
      kafka-topics --create --if-not-exists --topic ms-cuentas-replica --bootstrap-server localhost:9092 --partitions 1 --replication-factor 1 &&
      wait
      "
  
  # postgres:
  postgres:
    image: postgres:14-alpine
    container_name: postgres-cuentas
    environment:
      POSTGRES_DB: cuentasdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - integration-net

  ms-cuentas:    
    build: 
        context: ./services/ms-cuentas
        dockerfile: Dockerfile
    container_name: ms-cuentas
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: cuentasdb
      DB_USER: postgres
      DB_PASSWORD: postgres
    ports:
      - "8080:8080"
      - "9090:9090"
    depends_on:
      - postgres
    networks:
      - integration-net  
    
  # Será habilitado por el responsable de la replica de información en tiempo real
  # mysql:
  #   image: mysql:8
  #   container_name: mysql
  #   environment:
  #     MYSQL_ROOT_PASSWORD: root
  #     MYSQL_DATABASE: bank_db
  #   ports:
  #     - "3306:3306"
  #   networks:
  #     - integration-net
  #   volumes:
  #     - mysql_data:/var/lib/mysql

  # Será habilitado por el responsable de la replica de información en tiempo real
  # Se encarga de capturar cambios en la base de datos del microservicio ms-cuentas
  # y publicarlos en el tópico ms-cuentas-replica en Kafka 
  # debezium:
  #   image: debezium/connect:latest
  #   container_name: debezium
  #   ports:
  #     - "8083:8083"
  #   environment:
  #     BOOTSTRAP_SERVERS: kafka:9092
  #     GROUP_ID: 1
  #     CONFIG_STORAGE_TOPIC: debezium_configs
  #     OFFSET_STORAGE_TOPIC: debezium_offsets
  #     STATUS_STORAGE_TOPIC: debezium_statuses
  #     # Plugin para MySQL
  #     CONNECT_PLUGIN_PATH: /kafka/libs
  #     # MySQL connector config:
  #     DATABASE_SERVER_NAME: postgres
  #   depends_on:
  #     - kafka      
  #   networks:
  #     - integration-net 

  micro-estado-cuenta:    
    build: 
        context: ./services/micro-estado-cuenta
        dockerfile: Dockerfile
    container_name: micro-estado-cuenta    
    ports:
      - "26061:26061"      
    depends_on:
      - kafka
    networks:
      - integration-net  

  micro-estado-cuenta-notificacion:    
    build: 
        context: ./services/micro-estado-cuenta-notificacion
        dockerfile: Dockerfile
    container_name: micro-estado-cuenta-notificacion
    restart: always
    depends_on:
      - kafka

  # # KONG API GATEWAY
  # kong:
  #   image: kong:3.2  # versión de ejemplo
  #   container_name: kong
  #   restart: always
  #   ports:
  #     - "8000:8000"   # Puerto de entradas proxy (HTTP)
  #     - "8443:8443"   # Puerto de entradas proxy (HTTPS) si se configura
  #     - "8001:8001"   # Puerto Admin API (no exponer en prod)
  #   volumes:
  #     - ./kong/kong.yml:/usr/local/kong/declarative/kong.yml:ro
  #   environment:
  #     KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
  #     KONG_DATABASE: "off"  # DB-less
  #     KONG_PROXY_ACCESS_LOG: /dev/stdout
  #     KONG_ADMIN_ACCESS_LOG: /dev/stdout
  #     KONG_PROXY_ERROR_LOG: /dev/stderr
  #     KONG_ADMIN_ERROR_LOG: /dev/stderr
  #   networks:
  #     - integration-net

  # # SERVIDOR GRAPHQL
  # graphql-server:
  #   build: ./services/graphql-server
  #   container_name: graphql-server
  #   ports:
  #     - "4000:4000"
  #   networks:
  #     - integration-net

  # # MICRO-AUTH (para conectar con Auth0)
  # micro-auth:
  #   build: ./services/micro-auth
  #   container_name: micro-auth
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - integration-net

networks:
  integration-net:
    driver: bridge

volumes:
  #mysql_data:
  postgres_data: